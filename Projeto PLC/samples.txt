"(begin (if (It? 2 3) (/ 4 2)))"// (/ 15 3)
"(begin (if (It? 2 3) (/ 4 0) (/ 15 3)))"
"(begin (if (It? 2 3) (mod 4 2) (mod 10 3)))"
"(begin (define f (lambda (x) (+ x 10))) (define result (f (car '(50 34 567 433 22 23 2345 "ok" (6 87 6))))) (comment ola tudo bom) result)"
"(begin (cons 2 '(3 4 5)))"
"(begin (define (f a) (if (== a 0) 1 (* a (f (- a 1))))) (f 5))"
"(begin (eqv? 2 3))"
"(begin (eqv? '(2 3) '(2 3)))"
"(begin (eqv? '(2 3 . 5)  '(2 3 . 6)))"
"(begin (define x 12) (set! x (+ x 1)))"
"(begin (define x 12) (set! y (8)))"
"(begin (let ((x 2) (y 2)) (+ y x)))"
"(begin (let ((x 2)) (begin (define y 5) (+ y 1))) y)"
"(begin (define x 10) (let ((y 2)) (begin (set! x 20))) x)"
"(begin (let ((i 1)) (define f (make-closure (lambda (y) (begin (set! i (+ i y)) i) )))) (define val1 (f 1)) (define val2 (f 2)) (+ val1 val2))"
"(begin (let ((i 1)) (define f (make-closure (lambda (y) (+ y 2) )))) (define val1 (f 1)) (define val2 (f 2)) (+ val1 val2))"
"(begin  (define x 4) (define f (lambda (x) (if (== x 0) 1 (* x (f (- x 1)))))) (f 5))"


"(begin (let ((i 2)) (define f (make-closure (lambda (y) (begin (set! i (+ i y)) i))))) (if (It? (f (/ 239 12)) (f (mod 239 12))) 1 0))"